#include<bits/stdc++.h>
using namespace std;
const int N = 1500;
int n,m;
int maze[N][N];
int visited[N][N];
int level[N][N];
string str[N][N];
int dx[4] = {0,0,-1,1};
int dy[4] = {-1,1,0,0};
pair<int,int>src={0,0},dst={100,100};
 
 
bool is_inside(pair<int,int> node)
{
    int x = node.first;
    int y = node.second;
    if(x>=0 && x<n && y>=0 && y<m)
        return true;
    else
        return false;
}
 
bool is_wall(pair<int,int> node)
{
    int x = node.first;
    int y = node.second;
    if(maze[x][y]==-1)
        return true;
    else
        return false;
}
 
void bfs(pair<int,int> src)
{
    queue<pair<int,int>> q;
    visited[src.first][src.second] = 1;
    q.push(src);
 
    while(!q.empty())
    {
        pair<int,int> head = q.front();
        q.pop();
        int x = head.first;
        int y = head.second;
        for(int i=0;i<4;i++)
        {
            int new_x = x+dx[i];
            int new_y = y+dy[i];
            pair<int,int> adj_node = {new_x,new_y};
            if(is_inside(adj_node) && !is_wall(adj_node) && visited[new_x][new_y]==0)
            {
                visited[new_x][new_y]=1;
                level[new_x][new_y] = level[x][y] + 1;
                if(i==0)
                    str[new_x][new_y] = str[x][y] + "L";
                else if(i==1)
                    str[new_x][new_y] = str[x][y] + "R";
                else if(i==2)
                    str[new_x][new_y] = str[x][y] + "U";
                else if(i==3)
                    str[new_x][new_y] = str[x][y] + "D";
                q.push(adj_node);
            }
        }
    }
}
 
int main()
{
    int i,j;
    
    cin >> n >> m;
    for(i=0;i<n;i++)
    {
        string s;
        cin >> s;
        for(j=0;j<m;j++)
        {
            if(s[j]=='#')
                maze[i][j] = -1;
            else if(s[j]=='A')
                src = {i,j};
            else if(s[j]=='B')
                dst = {i,j};
        }
    }
    bfs(src);
    if(visited[dst.first][dst.second]==0)
        cout << "NO" << endl;
    else
    {
        cout << "YES" << endl << level[dst.first][dst.second] << endl;
        cout << str[dst.first][dst.second] << endl;
    }
}